using Microsoft.CodeAnalysis;

namespace WinRTWrapper.SourceGenerators
{
    public partial class WinRTWrapperGenerator
    {
        private const string GenerateMember =
            """
            // <auto-generated/>
            #pragma warning disable

            namespace WinRTWrapper.CodeAnalysis
            {
                /// <summary>
                /// Specifies the types of members to generate in the WinRT wrapper.
                /// </summary>
                internal enum GenerateMember
                {
                    /// <summary>
                    /// Specifies no members.
                    /// </summary>
                    None = 0,

                    /// <summary>
                    /// Specifies all members.
                    /// </summary>
                    All = (Interface << 1) | Defined | Interface,

                    /// <summary>
                    /// Specifies members that defined by wrapper class itself.
                    /// </summary>
                    Defined = 0x01,
            
                    /// <summary>
                    /// Specifies members that defined by target interfaces.
                    /// </summary>
                    Interface = Defined << 1,
                }
            }
            """;

        private const string GenerateWinRTWrapperAttribute =
            """
            // <auto-generated/>
            #pragma warning disable

            namespace WinRTWrapper.CodeAnalysis
            {
                /// <summary>
                /// Attribute to indicate that a class should be wrapped for WinRT compatibility.
                /// </summary>
                [global::System.AttributeUsage(global::System.AttributeTargets.Class, Inherited = false)]
                internal sealed class GenerateWinRTWrapperAttribute : global::System.Attribute
                {
                    /// <summary>
                    /// The type that this wrapper is targeting.
                    /// </summary>
                    private readonly global::System.Type target;

                    /// <summary>
                    /// The type of members to generate in the WinRT wrapper.
                    /// </summary>
                    private readonly global::WinRTWrapper.CodeAnalysis.GenerateMember member;

                    /// <summary>
                    /// The interfaces that this wrapper should implement.
                    /// </summary>
                    private readonly global::System.Type[] interfaces;

                    /// <summary>
                    /// Gets the type that this wrapper is targeting.
                    /// </summary>
                    public global::System.Type TargetType
                    {
                        get
                        {
                            return target;
                        }
                    }

                    /// <summary>
                    /// Gets the type of members to generate in the WinRT wrapper.
                    /// </summary>
                    public global::WinRTWrapper.CodeAnalysis.GenerateMember Member
                    {
                        get
                        {
                            return member;
                        }
                    }

                    /// <summary>
                    /// Gets the interfaces that this wrapper should implement.
                    /// </summary>
                    public global::System.Type[] Interfaces
                    {
                        get
                        {
                            return interfaces;
                        }
                    }

                    /// <summary>
                    /// Initializes a new instance of the <see cref="GenerateWinRTWrapperAttribute"/> class.
                    /// </summary>
                    /// <param name="target">The type that this wrapper is targeting.</param>
                    public GenerateWinRTWrapperAttribute(global::System.Type target)
                        : this(target, global::WinRTWrapper.CodeAnalysis.GenerateMember.All, global::System.Array.Empty<global::System.Type>())
                    { }

                    /// <summary>
                    /// Initializes a new instance of the <see cref="GenerateWinRTWrapperAttribute"/> class.
                    /// </summary>
                    /// <param name="target">The type that this wrapper is targeting.</param>
                    /// <param name="member">The type of members to generate in the WinRT wrapper.</param>
                    public GenerateWinRTWrapperAttribute(global::System.Type target, global::WinRTWrapper.CodeAnalysis.GenerateMember member)
                        : this(target, member, global::System.Array.Empty<global::System.Type>())
                    { }

                    /// <summary>
                    /// Initializes a new instance of the <see cref="GenerateWinRTWrapperAttribute"/> class.
                    /// </summary>
                    /// <param name="target">The type that this wrapper is targeting.</param>
                    /// <param name="interfaces">The interfaces that this wrapper should implement.</param>
                    public GenerateWinRTWrapperAttribute(global::System.Type target, params global::System.Type[] interfaces)
                        : this(target, global::WinRTWrapper.CodeAnalysis.GenerateMember.Interface, interfaces)
                    { }

                    /// <summary>
                    /// Initializes a new instance of the <see cref="GenerateWinRTWrapperAttribute"/> class.
                    /// </summary>
                    /// <param name="target">The type that this wrapper is targeting.</param>
                    /// <param name="member">The type of members to generate in the WinRT wrapper.</param>
                    /// <param name="interfaces">The interfaces that this wrapper should implement.</param>
                    public GenerateWinRTWrapperAttribute(global::System.Type target, global::WinRTWrapper.CodeAnalysis.GenerateMember member, params global::System.Type[] interfaces)
                    {
                        this.target = target;
                        this.member = member;
                        this.interfaces = interfaces;
                    }
                }
            }
            """;

        /// <summary>
        /// Emits the source for a given <see cref="GeneratedType"/> object.
        /// </summary>
        /// <param name="context">The input <see cref="IncrementalGeneratorPostInitializationContext"/> instance to use to emit code.</param>
        /// <param name="type">The <see cref="GeneratedType"/> object with info on the source to emit.</param>
        private void EmitPostGeneratedType(IncrementalGeneratorPostInitializationContext context)
        {
            context.AddSource($"{nameof(GenerateMember)}.g.cs", GenerateMember);
            context.AddSource($"{nameof(GenerateWinRTWrapperAttribute)}.g.cs", GenerateWinRTWrapperAttribute);
        }
    }

    /// <summary>
    /// Specifies the types of members to generate in the WinRT wrapper.
    /// </summary>
    internal enum GenerateMember
    {
        /// <summary>
        /// Specifies no members.
        /// </summary>
        None = 0,

        /// <summary>
        /// Specifies all members.
        /// </summary>
        All = (Interface << 1) | Defined | Interface,

        /// <summary>
        /// Specifies members that defined by wrapper class itself.
        /// </summary>
        Defined = 0x01,

        /// <summary>
        /// Specifies members that defined by target interfaces.
        /// </summary>
        Interface = Defined << 1,
    }
}
